// Generated by commsdsl2tools_qt v7.1.0

#include "Auth.h"

#include "cc_mqtt5/message/Auth.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqtt5/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqtt5
{

namespace message
{

class AuthImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqtt5::Message,
        ::cc_mqtt5::message::Auth,
        AuthImpl
    >
{
public:
    AuthImpl() = default;
    AuthImpl(const AuthImpl&) = default;
    AuthImpl(AuthImpl&&) = default;
    virtual ~AuthImpl() = default;
    AuthImpl& operator=(const AuthImpl&) = default;
    AuthImpl& operator=(AuthImpl&&) = default;
};

Auth::Auth() : m_pImpl(new AuthImpl) {}
Auth::~Auth() = default;

Auth& Auth::operator=(const Auth& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Auth& Auth::operator=(Auth&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Auth::nameImpl() const
{
    return m_pImpl->name();
}

bool Auth::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Auth::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Auth::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Auth::resetImpl()
{
    m_pImpl->reset();
}

bool Auth::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Auth*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Auth::isValidImpl() const
{
    return m_pImpl->isValid();
}

Auth::DataSeq Auth::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Auth::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Auth::Ptr Auth::cloneImpl() const
{
    ImplPtr impl(static_cast<AuthImpl*>(m_pImpl->clone().release()));
    return Ptr(new Auth(std::move(impl)));
}

void Auth::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Auth::DataSeq Auth::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Auth::FieldsList Auth::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Auth::FieldsList Auth::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Auth::Auth(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqtt5

} // namespace Message

} // namespace cc_tools_qt_plugin
