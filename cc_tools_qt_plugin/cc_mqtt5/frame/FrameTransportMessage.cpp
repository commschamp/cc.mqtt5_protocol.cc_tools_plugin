// Generated by commsdsl2tools_qt v6.3.0

#include "FrameTransportMessage.h"

#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/MsgId.h"
#include "cc_tools_qt_plugin/cc_mqtt5/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqtt5
{

namespace frame
{

struct IdAndFlagsLayer
{
    struct IdAndFlagsFieldMembers
    {
        static QVariantMap createProps_flags(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_mqtt5::frame::FrameLayers<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::IdAndFlagsMembers::IdAndFlagsFieldMembers::Flags;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_id(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_mqtt5::frame::FrameLayers<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::IdAndFlagsMembers::IdAndFlagsFieldMembers::Id;
            auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_msgId(Field::name(), serHidden);
            return props;
        }
    }; // struct IdAndFlagsFieldMembers

    static QVariantMap createProps_idAndFlagsField(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::frame::FrameLayers<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::IdAndFlagsMembers::IdAndFlagsField;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(IdAndFlagsFieldMembers::createProps_flags(true))
                .add(IdAndFlagsFieldMembers::createProps_id(true))
                .asMap();
    }
}; // struct IdAndFlagsLayer

struct SizeLayer
{
    static QVariantMap createProps_size(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::frame::FrameLayers<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::SizeMembers::Size;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct SizeLayer

struct DataLayer
{
    static QVariantMap createProps_data(bool serHidden)
    {
        return cc_tools_qt::property::field::ArrayList().name("Data").serialisedHidden(serHidden).asMap();
    }
}; // struct DataLayer

namespace
{

QVariantList createProps()
{
     QVariantList props;
     props.append(IdAndFlagsLayer::createProps_idAndFlagsField(false));
     props.append(SizeLayer::createProps_size(false));
     props.append(DataLayer::createProps_data(false));
     return props;
}

} // namespace

const QVariantList& FrameTransportMessageFields::props()
{
    static const QVariantList Props = createProps();
    return Props;
}

const QVariantList& FrameTransportMessage::fieldsPropertiesImpl() const
{
    return FrameTransportMessageFields::props();
}

} // namespace frame

} // namespace cc_mqtt5

} // namespace cc_tools_qt_plugin
