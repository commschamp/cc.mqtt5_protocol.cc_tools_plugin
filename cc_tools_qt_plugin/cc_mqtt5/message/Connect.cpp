// Generated by commsdsl2tools_qt v6.3.0

#include "Connect.h"

#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/BinData.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/PropertiesList.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/ProtocolName.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/Qos.h"
#include "cc_tools_qt_plugin/cc_mqtt5/field/String.h"
#include "cc_tools_qt_plugin/cc_mqtt5/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqtt5
{

namespace message
{

namespace
{

static QVariantMap createProps_protocolName(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::ProtocolName;
    auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_protocolName(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_protocolVersion(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::ProtocolVersion;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

struct FlagsMembers
{
    static QVariantMap createProps_low(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::FlagsMembers::Low;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(1U, "Clean Start")
                .add(2U, "Will Flag")
                .asMap();
    }

    static QVariantMap createProps_willQos(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::FlagsMembers::WillQos;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_qos(Field::name(), serHidden);
        return props;
    }

    static QVariantMap createProps_high(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::FlagsMembers::High;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "Will Retain")
                .add(1U, "Password Flag")
                .add(2U, "User Name Flag")
                .asMap();
    }
}; // struct FlagsMembers

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(FlagsMembers::createProps_low(true))
            .add(FlagsMembers::createProps_willQos(true))
            .add(FlagsMembers::createProps_high(true))
            .asMap();
}

static QVariantMap createProps_keepAlive(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::KeepAlive;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_properties(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::Properties;
    auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_propertiesList(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_clientId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::ClientId;
    auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_string(Field::name(), serHidden);
    return props;
}

struct WillPropertiesMembers
{
    static QVariantMap createProps_actWillProperties(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillPropertiesMembers::ActWillProperties;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_propertiesList(Field::name(), serHidden);
        return props;
    }
}; // struct WillPropertiesMembers

static QVariantMap createProps_willProperties(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillProperties;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(WillPropertiesMembers::createProps_actWillProperties(serHidden))
            .asMap();
}

struct WillTopicMembers
{
    static QVariantMap createProps_willTopic(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillTopicMembers::WillTopic;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_string(Field::name(), serHidden);
        return props;
    }
}; // struct WillTopicMembers

static QVariantMap createProps_willTopic(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillTopic;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(WillTopicMembers::createProps_willTopic(serHidden))
            .asMap();
}

struct WillMessageMembers
{
    static QVariantMap createProps_willMessage(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillMessageMembers::WillMessage;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_binData(Field::name(), serHidden);
        return props;
    }
}; // struct WillMessageMembers

static QVariantMap createProps_willMessage(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::WillMessage;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(WillMessageMembers::createProps_willMessage(serHidden))
            .asMap();
}

struct UserNameMembers
{
    static QVariantMap createProps_userName(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::UserNameMembers::UserName;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_string(Field::name(), serHidden);
        return props;
    }
}; // struct UserNameMembers

static QVariantMap createProps_userName(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::UserName;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(UserNameMembers::createProps_userName(serHidden))
            .asMap();
}

struct PasswordMembers
{
    static QVariantMap createProps_password(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::PasswordMembers::Password;
        auto props = cc_tools_qt_plugin::cc_mqtt5::field::createProps_binData(Field::name(), serHidden);
        return props;
    }
}; // struct PasswordMembers

static QVariantMap createProps_password(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqtt5::message::ConnectFields<cc_tools_qt_plugin::cc_mqtt5::options::DefaultOptions>::Password;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(PasswordMembers::createProps_password(serHidden))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_protocolName(false));
    props.append(createProps_protocolVersion(false));
    props.append(createProps_flags(false));
    props.append(createProps_keepAlive(false));
    props.append(createProps_properties(false));
    props.append(createProps_clientId(false));
    props.append(createProps_willProperties(false));
    props.append(createProps_willTopic(false));
    props.append(createProps_willMessage(false));
    props.append(createProps_userName(false));
    props.append(createProps_password(false));
    return props;
}

} // namespace

Connect::Connect() = default;
Connect::~Connect() = default;
Connect& Connect::operator=(const Connect&) = default;
Connect& Connect::operator=(Connect&&) = default;

const QVariantList& Connect::fieldsPropertiesImpl() const
{
    static const QVariantList Props = createProps();
    return Props;
}

} // namespace message

} // namespace cc_mqtt5

} // namespace cc_tools_qt_plugin
